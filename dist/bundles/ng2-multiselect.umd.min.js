!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/forms"),require("@angular/common")):"function"==typeof define&&define.amd?define(["exports","@angular/core","@angular/forms","@angular/common"],t):t(e["ng2-multiselect"]=e["ng2-multiselect"]||{},e.ng.core,e.ng.forms,e.ng.common)}(this,function(e,t,i,s){"use strict";var n=function(){function e(){}return e.prototype.transform=function(e,t){},e.decorators=[{type:t.Pipe,args:[{name:"searchFilter"}]}],e.ctorParameters=function(){return[]},e}(),o={provide:i.NG_VALUE_ACCESSOR,useExisting:t.forwardRef(function(){return l}),multi:!0},l=function(){function e(e,i){this.element=e,this.disabled=!1,this.selectionLimitReached=new t.EventEmitter,this.dropdownClosed=new t.EventEmitter,this.dropdownOpened=new t.EventEmitter,this.onAdded=new t.EventEmitter,this.onRemoved=new t.EventEmitter,this.numSelected=0,this.isVisible=!1,this.searchFilterText="",this.defaultSettings={pullRight:!1,enableSearch:!1,checkedStyle:"checkboxes",buttonClasses:"btn btn-default btn-secondary",containerClasses:"dropdown-inline",selectionLimit:0,closeOnSelect:!1,autoUnselect:!1,showCheckAll:!1,showUncheckAll:!1,fixedTitle:!1,dynamicTitleMaxItems:3,maxHeight:"300px",keyToSelect:"",lableToDisplay:"",isSimpleArray:!1},this.defaultTexts={checkAll:"Check all",uncheckAll:"Uncheck all",checked:"checked",checkedPlural:"checked",searchPlaceholder:"Search...",defaultTitle:"Select",allSelected:"All selected"},this.onModelChange=function(e){},this.onModelTouched=function(){},this.differ=i.find([]).create(null)}return e.prototype.onClick=function(e){if(this.isVisible){for(var t=!1;null!=e&&!t;)e===this.element.nativeElement&&(t=!0),e=e.parentElement;t||(this.isVisible=!1,this.dropdownClosed.emit())}},e.prototype.getItemStyle=function(e){if(!e.isLabel)return{cursor:"pointer"}},e.prototype.getKeyValue=function(e){return this.settings.isSimpleArray?e:e[this.settings.keyToSelect]},e.prototype.getLabelValue=function(e){return this.settings.isSimpleArray?e:e[this.settings.lableToDisplay]},e.prototype.ngOnInit=function(){if(this.settings=Object.assign(this.defaultSettings,this.settings),this.texts=Object.assign(this.defaultTexts,this.texts),this.title=this.texts.defaultTitle||"",this.settings.isSimpleArray&&(""!==this.settings.keyToSelect||""!==this.settings.lableToDisplay))throw new Error("Do no pass keyToSelect or lableToDisplay if it is simple array");if(!this.settings.isSimpleArray&&(""===this.settings.keyToSelect||""===this.settings.lableToDisplay))throw new Error("Pass keyToSelect or lableToDisplay if it is not simple array")},e.prototype.ngOnChanges=function(e){e.options&&(this.options=this.options||[]),e.texts&&!e.texts.isFirstChange()&&this.updateTitle()},e.prototype.writeValue=function(e){this.model=void 0!==e&&null!==e?e:[]},e.prototype.registerOnChange=function(e){this.onModelChange=e},e.prototype.registerOnTouched=function(e){this.onModelTouched=e},e.prototype.setDisabledState=function(e){this.disabled=e},e.prototype.ngDoCheck=function(){this.differ.diff(this.model)&&(this.updateNumSelected(),this.updateTitle())},e.prototype.validate=function(e){return this.model&&this.model.length?null:{required:{valid:!1}}},e.prototype.registerOnValidatorChange=function(e){throw new Error("Method not implemented.")},e.prototype.clearSearch=function(e){e.stopPropagation(),this.searchFilterText=""},e.prototype.toggleDropdown=function(){this.isVisible=!this.isVisible,this.isVisible?this.dropdownOpened.emit():this.dropdownClosed.emit()},e.prototype.isSelected=function(e){return this.model&&this.model.indexOf(this.getKeyValue(e))>-1},e.prototype.setSelected=function(e,t){e.stopPropagation(),this.model||(this.model=[]);var i=this.model.indexOf(this.getKeyValue(t));if(i>-1)this.model.splice(i,1),this.onRemoved.emit(this.getKeyValue(t));else if(0===this.settings.selectionLimit||this.settings.selectionLimit&&this.model.length<this.settings.selectionLimit)this.model.push(this.getKeyValue(t)),this.onAdded.emit(this.getKeyValue(t));else{if(!this.settings.autoUnselect)return void this.selectionLimitReached.emit(this.model.length);this.model.push(this.getKeyValue(t)),this.onAdded.emit(this.getKeyValue(t));var s=this.model.shift();this.onRemoved.emit(s)}this.settings.closeOnSelect&&this.toggleDropdown(),this.model=this.model.slice(),this.onModelChange(this.model),this.onModelTouched()},e.prototype.updateNumSelected=function(){this.numSelected=this.model&&this.model.length||0},e.prototype.updateTitle=function(){var e=this;0===this.numSelected||this.settings.fixedTitle?this.title=this.texts.defaultTitle||"":this.settings.displayAllSelectedText&&this.model.length===this.options.length?this.title=this.texts.allSelected||"":this.settings.dynamicTitleMaxItems&&this.settings.dynamicTitleMaxItems>=this.numSelected?this.title=this.options.filter(function(t){return e.model&&e.model.indexOf(e.getKeyValue(t))>-1}).map(function(t){return e.getLabelValue(t)}).join(", "):this.title=this.numSelected+" "+(1===this.numSelected?this.texts.checked:this.texts.checkedPlural)},e.prototype.searchFilterApplied=function(){return this.settings.enableSearch&&this.searchFilterText&&this.searchFilterText.length>0},e.prototype.checkAll=function(){this.model=[];for(var e=(this.searchFilterApplied(),this.options,0),t=this.options;e<t.length;e++){var i=t[e];this.model.push(this.getKeyValue(i))}this.onModelChange(this.model),this.onModelTouched()},e.prototype.uncheckAll=function(){this.model=[],this.onModelChange(this.model),this.onModelTouched()},e.prototype.preventCheckboxCheck=function(e,t){this.settings.selectionLimit&&!this.settings.autoUnselect&&this.model.length>=this.settings.selectionLimit&&-1===this.model.indexOf(this.getKeyValue(t))&&e.preventDefault()},e.decorators=[{type:t.Component,args:[{selector:"ng2-multiselect",template:'<div class="dropdown" [ngClass]="settings.containerClasses" [class.open]="isVisible" >\n  <button type="button" class="dropdown-toggle" [ngClass]="settings.buttonClasses" (click)="toggleDropdown()" [disabled]="disabled">{{ title }}<span class="caret"></span></button>\n  <ul *ngIf="isVisible" class="dropdown-menu" [class.pull-right]="settings.pullRight" [class.dropdown-menu-right]="settings.pullRight"\n    [style.max-height]="settings.maxHeight" style="display: block; height: auto; overflow-y: auto;width:100% !important;">\n    <li class="dropdown-item search" *ngIf="settings.enableSearch">\n      <div class="input-group input-group-sm">\n        <span class="input-group-addon" id="sizing-addon3"><i class="fa fa-search"></i></span>\n        <input type="text" class="form-control" placeholder="{{ texts.searchPlaceholder }}" aria-describedby="sizing-addon3" [(ngModel)]="searchFilterText"\n          [ngModelOptions]="{standalone: true}" autofocus>\n        <span class="input-group-btn" *ngIf="searchFilterText.length > 0">\n          <button class="btn btn-default btn-secondary" type="button" (click)="clearSearch($event)"><i class="fa fa-times"></i></button>\n        </span>\n      </div>\n    </li>\n    <li class="dropdown-divider divider" *ngIf="settings.enableSearch"></li>\n    <li class="dropdown-item check-control check-control-check" *ngIf="settings.showCheckAll">\n      <a href="javascript:;" role="menuitem" tabindex="-1" (click)="checkAll()">\n        <span style="width: 16px;" [ngClass]="{\'glyphicon glyphicon-ok\': settings.checkedStyle !== \'fontawesome\',\'fa fa-check\': settings.checkedStyle === \'fontawesome\'}"></span>        {{ texts.checkAll }}\n      </a>\n    </li>\n    <li class="dropdown-item check-control check-control-uncheck" *ngIf="settings.showUncheckAll">\n      <a href="javascript:;" role="menuitem" tabindex="-1" (click)="uncheckAll()">\n        <span style="width: 16px;" [ngClass]="{\'glyphicon glyphicon-remove\': settings.checkedStyle !== \'fontawesome\',\'fa fa-times\': settings.checkedStyle === \'fontawesome\'}"></span>        {{ texts.uncheckAll }}\n      </a>\n    </li>\n    <li *ngIf="settings.showCheckAll || settings.showUncheckAll" class="dropdown-divider divider"></li>\n    <li class="dropdown-item" [ngStyle]="getItemStyle(option)" *ngFor="let option of options"\n      (click)="setSelected($event, option)">\n      <a href="javascript:;" role="menuitem" tabindex="-1">\n        <input *ngIf="settings.checkedStyle === \'checkboxes\'" type="checkbox" [checked]="isSelected(option)" (click)="preventCheckboxCheck($event, option)"\n        />\n        <span *ngIf="settings.checkedStyle === \'glyphicon\'" style="width: 16px;" class="glyphicon" [class.glyphicon-ok]="isSelected(option)"></span>\n        <span *ngIf="settings.checkedStyle === \'fontawesome\'" style="width: 16px;display: inline-block;">\n          <i *ngIf="isSelected(option)" class="fa fa-check" aria-hidden="true"></i>\n        </span>\n        <span [ngClass]="settings.itemClasses">\n          {{ getLabelValue(option) }}\n        </span>\n      </a>\n    </li>\n  </ul>\n</div>',styles:["a {\n  outline: none !important;\n}\n\n.dropdown-toggle .caret {\n  margin-left: 4px;\n  white-space: nowrap;\n  display: inline-block;\n}\n"],providers:[o]}]}],e.ctorParameters=function(){return[{type:t.ElementRef},{type:t.IterableDiffers}]},e.propDecorators={options:[{type:t.Input}],settings:[{type:t.Input}],texts:[{type:t.Input}],disabled:[{type:t.Input}],selectionLimitReached:[{type:t.Output}],dropdownClosed:[{type:t.Output}],dropdownOpened:[{type:t.Output}],onAdded:[{type:t.Output}],onRemoved:[{type:t.Output}],onClick:[{type:t.HostListener,args:["document: click",["$event.target"]]}]},e}(),c=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{imports:[s.CommonModule,i.FormsModule],exports:[l,n],declarations:[l,n]}]}],e.ctorParameters=function(){return[]},e}();e.MultiSelectSearchFilter=n,e.MultiselectDropdownModule=c,e.MultiselectDropdown=l,Object.defineProperty(e,"__esModule",{value:!0})});