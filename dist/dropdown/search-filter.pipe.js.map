{"version":3,"file":"search-filter.pipe.js","sourceRoot":"","sources":["../../src/dropdown/search-filter.pipe.ts"],"names":[],"mappings":"OAAO,EAAE,IAAI,EAAiB,MAAM,eAAe;AAInD;IAAA;IAmBA,CAAC;IAlBC,2CAAS,GAAT,UAAU,OAAkC,EAAE,IAAY;QACxD,6HAA6H;QAC7H,yGAAyG;QACzG,uGAAuG;QACvG,0DAA0D;QAC1D,qCAAqC;QACrC,gGAAgG;QAChG,uFAAuF;QACvF,MAAM;IACR,CAAC;IACI,kCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;oBACnB,IAAI,EAAE,cAAc;iBACrB,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,sCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,8BAAC;AAAD,CAAC,AAnBD,IAmBC","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { IMultiSelectOption } from './types';\n\n\nexport class MultiSelectSearchFilter implements PipeTransform {\n  transform(options: Array<IMultiSelectOption>, args: string) {\n    // const matchPredicate = (option: IMultiSelectOption) => option.name.toLowerCase().indexOf((args || '').toLowerCase()) > -1,\n    //   getChildren = (option: IMultiSelectOption) => options.filter(child => child.parentId === option.id),\n    //   getParent = (option: IMultiSelectOption) => options.find(parent => option.parentId === parent.id);\n    // return options.filter((option: IMultiSelectOption) => {\n    //   return matchPredicate(option) ||\n    //     (typeof (option.parentId) === 'undefined' && getChildren(option).some(matchPredicate)) ||\n    //     (typeof (option.parentId) !== 'undefined' && matchPredicate(getParent(option)));\n    // });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'searchFilter'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}